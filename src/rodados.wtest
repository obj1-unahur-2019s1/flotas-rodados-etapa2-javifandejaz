import rodados.*
import dependencia.*
import pedidos.*

describe "Flota de rodados" {
	const cachito = new Corsa(color = "rojo")
	
	test "Dependencia cultura" {
		const cultura = new Dependencia(empleados = 31)
		
		const viaje1 = new Pedido(distancia= 960 , tiempoMaximo = 8, cantidad = 4, coloresIncompatibles =["azul", "negro"])
		const viaje2 = new Pedido(distancia= 960 , tiempoMaximo = 8, cantidad = 4, coloresIncompatibles =["azul", "negro","rojo"])
		
		assert.notThat(cultura.esGrande())
		cultura.agregarAFlota(cachito)
		cultura.agregarAFlota(new Kwid(tanqueAdicional = true))
		cultura.agregarAFlota(new Kwid(tanqueAdicional = true))
		cultura.agregarAFlota(new Kwid(tanqueAdicional = false))
		cultura.agregarAFlota(trafic)
		trafic.interior(interiorPopular); trafic.motor(motorBataton)
		assert.equals(10700, cultura.pesoTotalFlota())
		assert.notThat(cultura.estaBienEquipada())
		assert.equals(10, cultura.capacidadTotalEnColor("azul"))
		assert.equals("rojo", cultura.colorDelRodadoMasRapido())
		assert.notThat(cultura.esGrande())
		assert.equals(5, cultura.capacidadFaltante())
		assert.equals(true, viaje1.puedeSatisfacer(cachito))
		assert.equals(false, viaje2.puedeSatisfacer(cachito))
		}
		
	
	test "Dependencia deportes" {
		const deportes = new Dependencia(empleados = 45)
		deportes.agregarAFlota(cachito)
		deportes.agregarAFlota(new Corsa(color = "azul"))
		deportes.agregarAFlota(new Corsa(color = "verde"))
		deportes.agregarAFlota(new Kwid(tanqueAdicional = true))
		deportes.agregarAFlota(
			new AutoEspecial(capacidad = 5, velocidadMaxima = 160, 
				peso = 1200, color = "beige")
		)
	
		assert.equals(6450, deportes.pesoTotalFlota())	
		assert.equals(true, deportes.estaBienEquipada())
		assert.equals(7, deportes.capacidadTotalEnColor("azul"))
		assert.equals("beige", deportes.colorDelRodadoMasRapido())
		assert.equals(true, deportes.esGrande())
		assert.equals(25, deportes.capacidadFaltante())	
	}
}











